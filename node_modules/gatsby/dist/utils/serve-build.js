'use strict';

var _detectPort = require('detect-port');

var _detectPort2 = _interopRequireDefault(_detectPort);

var _hapi = require('hapi');

var _hapi2 = _interopRequireDefault(_hapi);

var _opn = require('opn');

var _opn2 = _interopRequireDefault(_opn);

var _readline = require('readline');

var _readline2 = _interopRequireDefault(_readline);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _getProcessForPort = require('./getProcessForPort');

var _getProcessForPort2 = _interopRequireDefault(_getProcessForPort);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*  weak */
var rlInterface = _readline2.default.createInterface({
  input: process.stdin,
  output: process.stdout
});

var debug = require('debug')('gatsby:application');

function startServer(program, launchPort) {
  var directory = program.directory;
  var serverPort = launchPort || program.port;

  debug('Serving /public');
  var server = new _hapi2.default.Server();

  server.connection({
    host: program.host,
    port: serverPort
  });

  server.route({
    method: 'GET',
    path: '/{path*}',
    handler: {
      directory: {
        path: directory + '/public',
        listing: false,
        index: true
      }
    }
  });

  server.start(function (e) {
    if (e) {
      if (e.code === 'EADDRINUSE') {
        // eslint-disable-next-line max-len
        console.log(_chalk2.default.red('Unable to start Gatsby on port ' + serverPort + ' as there\'s already a process listing on that port.'));
      } else {
        console.log(_chalk2.default.red(e));
      }

      process.exit();
    } else {
      if (program.open) {
        (0, _opn2.default)(server.info.uri);
      }
      console.log(_chalk2.default.green('Server started successfully!'));
      console.log();
      console.log('Listening at:');
      console.log();
      console.log('  ', _chalk2.default.cyan(server.info.uri));
    }
  });
}

module.exports = function (program) {
  var existingProcess = (0, _getProcessForPort2.default)(program.port);

  (0, _detectPort2.default)(program.port, function (err, _port) {
    if (err) {
      console.error(err);
      process.exit();
    }

    if (program.port !== _port) {
      // eslint-disable-next-line max-len
      var question = _chalk2.default.yellow('Something is already running on port ' + program.port + '.\n' + (existingProcess ? ' Probably:\n  ' + existingProcess + '\n' : '') + '\nWould you like to run the app at another port instead? [Y/n]');

      return rlInterface.question(question, function (answer) {
        var launchPort = program.port;
        if (answer.length === 0 || answer.match(/^yes|y$/i)) {
          launchPort = _port;
        }

        return startServer(program, launchPort);
      });
    }

    return startServer(program);
  });
};